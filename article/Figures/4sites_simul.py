#%%
a_mat,b_mat = ([(-5.051514762044462e-15+0j),
  (3.0808688933348094e-15+0j),
  (-4.163336342344337e-17+0j),
  (1.4210854715202004e-14+0j),
  (2.6645352591003757e-15+0j),
  (-9.769962616701378e-15+0j),
  (3.774758283725532e-15+0j),
  (2.6645352591003757e-15+0j),
  (-1.3988810110276972e-14+0j),
  (5.551115123125783e-15+0j)],
 [(2.4494897427831765+0j),
  (2.6766477894210055+0j),
  (4.134543556420193+0j),
  (3.8402095271561696+0j),
  (6.296760586509413+0j),
  (3.409827442132738+0j),
  (5.803441336844767+0j),
  (5.239561391596429+0j),
  (5.072119418746984+0j)])
#%%
a40k,b40k = ([0.005000000000000001,
  -0.012683047934246825,
  0.013252811917890246,
  -0.00591722077609937,
  0.005557735832429566,
  -0.0032817547149786323,
  -0.011783679581693235,
  0.04248445258556958,
  -0.0642420677021006,
  0.07176891544742288,
  -0.0622154138538503],
 [1.0,
  2.4495175035096204,
  2.679276320436828,
  4.136019336801353,
  3.837845987762816,
  6.2890529015768495,
  3.428787462089152,
  5.781078681424948,
  5.243789641979175,
  5.060386510655951,
  5.023850110123616])
metadata40k = {
'mean_weights':[0.5,
 0.2043769841541097,
 0.09980837941069741,
 0.039696033881368595,
 0.02975254426123985,
 0.012186446853339864,
 0.015971494103503993,
 0.006971761186017123,
 0.005975642575485269,
 0.004385926625098257,
 0.003812153128750442,
 0.003812153128750442] ,
'median_wights':[0.5,
 0.20412183186427935,
 0.15237086993027985,
 0.036839980068400245,
 0.01919825870338026,
 0.012210588146629642,
 0.008902992881330242,
 0.0043120637931847354,
 0.0016446364509607697,
 0.001462509635131433,
 0.0006304433545492401,
 0.0006304433545492401] ,
'times': [0,
 0.5257909297943115,
 2.3104519844055176,
 9.513335227966309,
 20.136990070343018,
 25.793617010116577,
 30.425208806991577,
 37.16393184661865,
 54.090776205062866,
 93.68303370475769,
 157.92403507232666,
 108.5904848575592],
'num_terms':[2, 8, 26, 76, 184, 424, 874, 1690, 2928, 4394, 5908, 5908]
 }
b40k = b40k[1:-1]# conventionnal difference in the computation.
a40k = a40k[:-1]
print("Obtained using Jerome's implementation that relies on an old version of PauliArray. 40000 shots per averages")
#%%
(a4k,b4k) =([0.03300000000000001,
  -0.005161248294132767,
  0.013920928259228114,
  -0.09391897091416668,
  -0.0010954205403902358,
  0.05484786037090364,
  -0.04088084892731874,
  0.1399374145345874,
  -0.16188737307931433,
  0.13759221003760708,
  -0.2705883797578233]
 , [1.0,
  2.449914080126077,
  2.6693658013538824,
  4.160002934583167,
  3.8309602987930416,
  6.267663659829972,
  3.3810472450033995,
  5.866027705574107,
  5.325155363146623,
  4.981094951816967,
  5.046955289362525])
metadata4k = {
'mean_weights': [0.5,
 0.20577252242823832,
 0.10064893710124045,
 0.039798618478448504,
 0.030068689007074,
 0.012392354703096128,
 0.016224645987090093,
 0.006983845648159403,
 0.006070041455461772,
 0.004582863192577758,
 0.00387161035399271,
 0.00387161035399271],
'median_wights': [0.5,
 0.2040887899114687,
 0.15291181883573723,
 0.03675762282871058,
 0.019189769646159587,
 0.012246840728961619,
 0.00905550842794368,
 0.004322417975310394,
 0.0016233960065181227,
 0.0015587740912820424,
 0.0006757402441891704,
 0.0006757402441891704],
'times': [0,
 0.476855993270874,
 1.748002052307129,
 7.109670162200928,
 15.232830047607422,
 19.95002794265747,
 24.744985818862915,
 32.11072111129761,
 49.756635904312134,
 88.81124806404114,
 153.91336297988892,
 107.03394293785095],
 'num_terms':[2, 8, 26, 76, 184, 424, 874, 1690, 2928, 4394, 5908, 5908]
 }
#%%

from LiouvilleLanczos.Green import CF_Green

green_40k = CF_Green(a40k,b40k)
green_8_matrix = CF_Green(a_mat,b_mat)
#%%
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

sns.set_style("whitegrid")
sns.set_palette("colorblind")

# Create a simple line plot
w = np.linspace(-6,6,1000)-0.1j
y = np.imag(green_40k(w))
ymat = np.imag(green_8_matrix(w))
plt.plot(w, ymat,label="Matrix")
plt.plot(w, y,label="QSim. 40kS")

# Set axis labels and title
plt.xlabel("Frequency")
plt.ylabel("Density of state")
plt.legend()
# plt.title("My Plot")

# Show the plot
plt.show()



# %%
